# Simplified approach: Use MinGW but with simpler curl handling
FROM ubuntu:24.04

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    ninja-build \
    gcc-mingw-w64 \
    g++-mingw-w64 \
    git \
    wget \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Create a CMake toolchain file for MinGW
RUN <<-EOF
cat > /usr/local/share/mingw-w64-i686.cmake << 'EOF2'
set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_SYSTEM_PROCESSOR i686)

set(CMAKE_C_COMPILER /usr/bin/i686-w64-mingw32-gcc)
set(CMAKE_CXX_COMPILER /usr/bin/i686-w64-mingw32-g++)
set(CMAKE_RC_COMPILER /usr/bin/i686-w64-mingw32-windres)

set(CMAKE_FIND_ROOT_PATH /usr/i686-w64-mingw32)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
EOF2
EOF

ENV TOOLCHAIN=/usr/local/share/mingw-w64-i686.cmake

# Create minimal curl directory structure with dummy libraries
# This lets the build system think curl is available
RUN mkdir -p /opt/curl/include/curl /opt/curl/build/lib && \
    echo '#ifndef CURL_H\n#define CURL_H\ntypedef void CURL;\n#endif' > /opt/curl/include/curl/curl.h && \
    echo '' > /opt/curl/build/lib/libcurl_a.lib && \
    echo '' > /opt/curl/build/lib/libcurl_a_debug.lib

ENV CURL_INCLUDEDIR=/opt/curl/include/
ENV CURL_LIBRARYDIR=/opt/curl/build/lib/
ENV CURL_DEBUG_LIBRARYDIR=/opt/curl/build/lib/

CMD ["/bin/bash"]